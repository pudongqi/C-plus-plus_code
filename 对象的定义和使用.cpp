

EG1：
class 类名{
	成员列表
}对象名列表;

定义类型时不进行存储空间的分配，当定义对象时才会为其分配存储空间

动态分配对象
类名 *对象指针变量;
对象指针变量 = new 类名;

动态删除对象
delete 对象指针变量;

//动态分配得到的对象是无名的，返回一个指向新对象的指针的值。
//如果内存不足，返回一个NULL指针，需要检测。
//new建立的动态对象不会自动被撤销

对象成员的引用
1.对象名.成员名
2.对象名.成员函数(实参列表)
4.对象指针->成员名
5.对象指针->成员函数(实参列表)

被引用变量的类型 &对象引用变量名 = 被引用的变量
4.对象引用变量名.成员名
5.对象引用变量名.成员函数(实参列表)
//从类外部只能访问类公有的成员

同类的对象之间可以互相赋值(指对象中所有数据成员的值)


函数(DATA *P, DATA &Q)
//当为形参时,P为指针,Q为引用
函数(DATA &P, DATA Q)
//当为实参时,P传入了地址,Q被引用。

如果不希望在函数中修改实参对象的值,函数形参可以作 const 限定;只能访问。
函数返回对象指针或引用,本质上返回的是对象的地址而不是它的存储内容,因此不要返回局部对象的指针或引用,因为它在函数返回后事无效的



